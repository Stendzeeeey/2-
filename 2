ListWork45°. Дан непустой двусвязный список, первый, последний и текущий элементы которого имеют адреса P1, P2 и P3. 
Используя тип TList (см. задание ListWork41), описать процедуры ToFirst(L) (делает текущим первый элемент списка L), ToNext(L) 
(делает текущим в списке L следующий элемент, если он существует), SetData(L, D) (присваивает текущему элементу списка L значение D целого типа) 
и функцию IsLast(L) логического типа (возвращает true, если текущий элемент списка L является его последним элементом, и false в противном случае).
Параметр L имеет тип TList; в процедурах ToFirst и ToNext он является входным и выходным. С помощью этих процедур и функций присвоить нулевые значения
элементам исходного списка с нечетными номерами и вывести количество элементов в списке, а также новые адреса его первого, последнего и текущего элементов 
(текущим элементом должен стать последний элемент списка).

#include <windows.h>
#pragma hdrstop
#include "pt4.h"
using namespace std;

typedef struct {
	PNode First;
	PNode Last;
	PNode Current;
} TList;

bool IsLast(TList L) {
	return L.Current == L.Last;
}

void SetData(TList &L, int D) {
	L.Current->Data = D;
}

void ToNext(TList &L) {
	if (L.Current->Next != NULL)
		L.Current = L.Current->Next;
}

void ToFirst(TList &L) {
	L.Current = L.First;
}

void Solve()
{
    Task("ListWork45");
	PNode P1, P2, P3;
	pt >> P1 >> P2 >> P3;
	TList L;
	L.First = P1;
	L.Last = P2;
	L.Current = P3;
	int N(0); ToFirst(L);
	while (!IsLast(L)) {
		L.Current->Data = 0;
		N++;
		ToNext(L);
		if(!IsLast(L)) {
			N++;
			ToNext(L);
		}
	}
	if (N%2 == 0) L.Last->Data = 0; N++;
	pt << N << L.First << L.Last << L.Current;
}
